{"version":3,"sources":["../node_modules/near-ledger-js/index.js","../node_modules/u2f-api/lib/google-u2f-api.js","../node_modules/u2f-api/lib/u2f-api.js","../node_modules/u2f-api/index.js","../node_modules/@ledgerhq/errors/dist/index.js","../src/Transport.js","../src/index.js","../src/TransportU2F.js","utils/ledger.js"],"names":["bip32PathToBytes","path","parts","split","Buffer","concat","map","part","endsWith","Math","abs","parseInt","slice","i32","from","networkId","charCodeAt","DEFAULT_PATH","module","exports","createClient","transport","getVersion","send","major","response","Array","minor","patch","getPublicKey","subarray","sign","transactionData","version","console","info","CHUNK_SIZE","allData","offset","length","chunk","isLastChunk","errorClasses","deserializers","addCustomErrorDeserializer","name","deserializer","createCustomErrorClass","C","message","fields","Object","assign","stack","Error","prototype","deserializeError","object","msg","JSON","parse","e","error","name_1","des","constructor","warn","create","prop","hasOwnProperty","captureStackTrace","String","serializeError","value","destroyCircular","seen","to","push","_i","_a","keys","key","indexOf","AccountNameRequiredError","AccountNotSupported","AmountRequired","BluetoothRequired","BtcUnmatchedApp","CantOpenDevice","CashAddrNotSupported","CurrencyNotSupported","DeviceAppVerifyNotSupported","DeviceGenuineSocketEarlyClose","DeviceNotGenuineError","DeviceOnDashboardExpected","DeviceOnDashboardUnexpected","DeviceInOSUExpected","DeviceHalted","DeviceNameInvalid","DeviceSocketFail","DeviceSocketNoBulkStatus","DisconnectedDevice","DisconnectedDeviceDuringOperation","EnpointConfigError","EthAppPleaseEnableContractData","FeeEstimationFailed","FirmwareNotRecognized","HardResetFail","InvalidXRPTag","InvalidAddress","InvalidAddressBecauseDestinationIsAlsoSource","LatestMCUInstalledError","UnknownMCU","LedgerAPIError","LedgerAPIErrorWithMessage","LedgerAPINotAvailable","ManagerAppAlreadyInstalledError","ManagerAppRelyOnBTCError","ManagerAppDepInstallRequired","ManagerAppDepUninstallRequired","ManagerDeviceLockedError","ManagerFirmwareNotEnoughSpaceError","ManagerNotEnoughSpaceError","ManagerUninstallBTCDep","NetworkDown","NoAddressesFound","NotEnoughBalance","NotEnoughBalanceToDelegate","NotEnoughBalanceInParentAccount","NotEnoughSpendableBalance","NotEnoughBalanceBecauseDestinationNotCreated","NoAccessToCamera","NotEnoughGas","NotSupportedLegacyAddress","GasLessThanEstimate","PasswordsDontMatchError","PasswordIncorrectError","RecommendSubAccountsToEmpty","RecommendUndelegation","TimeoutTagged","UnexpectedBootloader","MCUNotGenuineToDashboard","RecipientRequired","UnavailableTezosOriginatedAccountReceive","UnavailableTezosOriginatedAccountSend","UpdateFetchFileFail","UpdateIncorrectHash","UpdateIncorrectSig","UpdateYourApp","UserRefusedDeviceNameChange","UserRefusedAddress","UserRefusedFirmwareUpdate","UserRefusedAllowManager","UserRefusedOnDevice","TransportOpenUserCancelled","TransportInterfaceNotAvailable","TransportRaceCondition","TransportWebUSBGestureRequired","DeviceShouldStayInApp","WebsocketConnectionError","WebsocketConnectionFailed","WrongDeviceForAccount","WrongAppForCurrency","ETHAddressNonEIP","CantScanQRCode","FeeNotLoaded","FeeRequired","FeeTooHigh","SyncError","PairingFailed","GenuineCheckFailed","LedgerAPI4xx","LedgerAPI5xx","FirmwareOrAppUpdateRequired","NoDBPathGiven","DBWrongPassword","DBNotReset","TransportError","id","StatusCodes","PIN_REMAINING_ATTEMPTS","INCORRECT_LENGTH","MISSING_CRITICAL_PARAMETER","COMMAND_INCOMPATIBLE_FILE_STRUCTURE","SECURITY_STATUS_NOT_SATISFIED","CONDITIONS_OF_USE_NOT_SATISFIED","INCORRECT_DATA","NOT_ENOUGH_MEMORY_SPACE","REFERENCED_DATA_NOT_FOUND","FILE_ALREADY_EXISTS","INCORRECT_P1_P2","INS_NOT_SUPPORTED","CLA_NOT_SUPPORTED","TECHNICAL_PROBLEM","OK","MEMORY_PROBLEM","NO_EF_SELECTED","INVALID_OFFSET","FILE_NOT_FOUND","INCONSISTENT_FILE","ALGORITHM_NOT_SUPPORTED","INVALID_KCV","CODE_NOT_INITIALIZED","ACCESS_CONDITION_NOT_FULFILLED","CONTRADICTION_SECRET_CODE_STATUS","CONTRADICTION_INVALIDATION","CODE_BLOCKED","MAX_VALUE_REACHED","GP_AUTH_FAILED","LICENSING","HALTED","getAltStatusMessage","code","TransportStatusError","statusCode","statusText","find","k","smsg","statusCodeStr","toString","Transport","exchangeTimeout","unresponsiveTimeout","deviceModel","_events","EventEmitter","cla","ins","p1","p2","data","alloc","statusList","exchange","sw","readUInt16BE","some","s","exchangeBusyPromise","exchangeAtomicImpl","resolveBusy","busyPromise","Promise","r","unresponsiveReached","timeout","setTimeout","emit","res","f","clearTimeout","_appAPIlock","_apdu","setScrambleKey","_key","close","resolve","on","eventName","cb","off","removeListener","event","args","setDebugMode","setExchangeTimeout","setExchangeUnresponsiveTimeout","openTimeout","listenTimeout","reject","found","sub","listen","next","unsubscribe","listenTimeoutId","open","descriptor","then","complete","ErrorMessage_NoDeviceFound","ErrorMessage_ListenTimeout","decorateAppAPIMethods","self","methods","scrambleKey","methodName","decorateAppAPIMethod","ctx","apply","isSupported","list","subscribers","log","type","obj","date","Date","dispatch","i","pop","window","__ledgerLogsListen","TransportU2F","wrapU2FTransportError","originalError","err","wrapApdu","apdu","result","webSafe64","base64","replace","normal64","substring","attemptExchange","timeoutMillis","unwrap","keyHandle","challenge","signRequest","appId","location","origin","signatureData","transportInstances","emitDisconnect","forEach","t","isTimeoutU2FError","u2fError","metaData","_","_openTimeout","isU2FError","setUnwrap","supported","observer","unsubscribed","createLedgerU2FTransport","createLedgerU2FClient","client"],"mappings":"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","file":"ledger.b6e139cd.js","sourceRoot":"../src","sourcesContent":["\nfunction bip32PathToBytes(path) {\n    const parts = path.split('/');\n    return Buffer.concat(\n        parts\n            .map(part => part.endsWith(`'`)\n                ? Math.abs(parseInt(part.slice(0, -1))) | 0x80000000\n                : Math.abs(parseInt(part)))\n            .map(i32 => Buffer.from([\n                (i32 >> 24) & 0xFF,\n                (i32 >> 16) & 0xFF,\n                (i32 >> 8) & 0xFF,\n                i32 & 0xFF,\n            ])));\n}\n\nconst networkId = 'W'.charCodeAt(0);\n\nconst DEFAULT_PATH = \"44'/397'/0'/0'/1'\";\n \nmodule.exports.createClient = async function createClient(transport) {\n    return {\n        transport,\n        async getVersion() {\n            const response = await this.transport.send(0x80, 6, 0, 0);\n            const [major, minor, patch] = Array.from(response);\n            return `${major}.${minor}.${patch}`;\n        },\n        async getPublicKey(path) {\n            path = path || DEFAULT_PATH;\n            const response = await this.transport.send(0x80, 4, 0, networkId, bip32PathToBytes(path));\n            return Buffer.from(response.subarray(0, -2));\n        },\n        async sign(transactionData, path) {\n            // NOTE: getVersion call allows to reset state to avoid starting from partially filled buffer\n            const version = await this.getVersion();\n            console.info('Ledger app version:', version);\n            // TODO: Assert compatible versions\n\n            path = path || DEFAULT_PATH;\n            transactionData = Buffer.from(transactionData);\n            // 128 - 5 service bytes\n            const CHUNK_SIZE = 123\n            const allData = Buffer.concat([bip32PathToBytes(path), transactionData]);\n            for (let offset = 0; offset < allData.length; offset += CHUNK_SIZE) {\n                const chunk = Buffer.from(allData.subarray(offset, offset + CHUNK_SIZE));\n                const isLastChunk = offset + CHUNK_SIZE >= allData.length;\n                const response = await this.transport.send(0x80, 2, isLastChunk ? 0x80 : 0, networkId, chunk);\n                if (isLastChunk) {\n                    return Buffer.from(response.subarray(0, -2));\n                }\n            }\n        }\n    }\n}\n","// Copyright 2014 Google Inc. All rights reserved\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n/**\n * @fileoverview The U2F api.\n */\n\n'use strict';\n\n/** Namespace for the U2F api.\n * @type {Object}\n */\nvar u2f = u2f || {};\n\nmodule.exports = u2f; // Adaptation for u2f-api package\n\n/**\n * The U2F extension id\n * @type {string}\n * @const\n */\nu2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';\n\n/**\n * Message types for messsages to/from the extension\n * @const\n * @enum {string}\n */\nu2f.MessageTypes = {\n  'U2F_REGISTER_REQUEST': 'u2f_register_request',\n  'U2F_SIGN_REQUEST': 'u2f_sign_request',\n  'U2F_REGISTER_RESPONSE': 'u2f_register_response',\n  'U2F_SIGN_RESPONSE': 'u2f_sign_response'\n};\n\n/**\n * Response status codes\n * @const\n * @enum {number}\n */\nu2f.ErrorCodes = {\n  'OK': 0,\n  'OTHER_ERROR': 1,\n  'BAD_REQUEST': 2,\n  'CONFIGURATION_UNSUPPORTED': 3,\n  'DEVICE_INELIGIBLE': 4,\n  'TIMEOUT': 5\n};\n\n/**\n * A message type for registration requests\n * @typedef {{\n *   type: u2f.MessageTypes,\n *   signRequests: Array.<u2f.SignRequest>,\n *   registerRequests: ?Array.<u2f.RegisterRequest>,\n *   timeoutSeconds: ?number,\n *   requestId: ?number\n * }}\n */\nu2f.Request;\n\n/**\n * A message for registration responses\n * @typedef {{\n *   type: u2f.MessageTypes,\n *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),\n *   requestId: ?number\n * }}\n */\nu2f.Response;\n\n/**\n * An error object for responses\n * @typedef {{\n *   errorCode: u2f.ErrorCodes,\n *   errorMessage: ?string\n * }}\n */\nu2f.Error;\n\n/**\n * Data object for a single sign request.\n * @typedef {{\n *   version: string,\n *   challenge: string,\n *   keyHandle: string,\n *   appId: string\n * }}\n */\nu2f.SignRequest;\n\n/**\n * Data object for a sign response.\n * @typedef {{\n *   keyHandle: string,\n *   signatureData: string,\n *   clientData: string\n * }}\n */\nu2f.SignResponse;\n\n/**\n * Data object for a registration request.\n * @typedef {{\n *   version: string,\n *   challenge: string,\n *   appId: string\n * }}\n */\nu2f.RegisterRequest;\n\n/**\n * Data object for a registration response.\n * @typedef {{\n *   registrationData: string,\n *   clientData: string\n * }}\n */\nu2f.RegisterResponse;\n\n\n// Low level MessagePort API support\n\n/**\n * Call MessagePort disconnect\n */\nu2f.disconnect = function() {\n  if (u2f.port_ && u2f.port_.port_) {\n    u2f.port_.port_.disconnect();\n    u2f.port_ = null;\n  }\n};\n\n/**\n * Sets up a MessagePort to the U2F extension using the\n * available mechanisms.\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\n */\nu2f.getMessagePort = function(callback) {\n  if (typeof chrome != 'undefined' && chrome.runtime) {\n    // The actual message here does not matter, but we need to get a reply\n    // for the callback to run. Thus, send an empty signature request\n    // in order to get a failure response.\n    var msg = {\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\n      signRequests: []\n    };\n    chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function() {\n      if (!chrome.runtime.lastError) {\n        // We are on a whitelisted origin and can talk directly\n        // with the extension.\n        u2f.getChromeRuntimePort_(callback);\n      } else {\n        // chrome.runtime was available, but we couldn't message\n        // the extension directly, use iframe\n        u2f.getIframePort_(callback);\n      }\n    });\n  } else {\n    // chrome.runtime was not available at all, which is normal\n    // when this origin doesn't have access to any extensions.\n    u2f.getIframePort_(callback);\n  }\n};\n\n/**\n * Connects directly to the extension via chrome.runtime.connect\n * @param {function(u2f.WrappedChromeRuntimePort_)} callback\n * @private\n */\nu2f.getChromeRuntimePort_ = function(callback) {\n  var port = chrome.runtime.connect(u2f.EXTENSION_ID,\n    {'includeTlsChannelId': true});\n  setTimeout(function() {\n    callback(null, new u2f.WrappedChromeRuntimePort_(port));\n  }, 0);\n};\n\n/**\n * A wrapper for chrome.runtime.Port that is compatible with MessagePort.\n * @param {Port} port\n * @constructor\n * @private\n */\nu2f.WrappedChromeRuntimePort_ = function(port) {\n  this.port_ = port;\n};\n\n/**\n * Posts a message on the underlying channel.\n * @param {Object} message\n */\nu2f.WrappedChromeRuntimePort_.prototype.postMessage = function(message) {\n  this.port_.postMessage(message);\n};\n\n/**\n * Emulates the HTML 5 addEventListener interface. Works only for the\n * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.\n * @param {string} eventName\n * @param {function({data: Object})} handler\n */\nu2f.WrappedChromeRuntimePort_.prototype.addEventListener =\n    function(eventName, handler) {\n  var name = eventName.toLowerCase();\n  if (name == 'message' || name == 'onmessage') {\n    this.port_.onMessage.addListener(function(message) {\n      // Emulate a minimal MessageEvent object\n      handler({'data': message});\n    });\n  } else {\n    console.error('WrappedChromeRuntimePort only supports onMessage');\n  }\n};\n\n/**\n * Sets up an embedded trampoline iframe, sourced from the extension.\n * @param {function(MessagePort)} callback\n * @private\n */\nu2f.getIframePort_ = function(callback) {\n  // Create the iframe\n  var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;\n  var iframe = document.createElement('iframe');\n  iframe.src = iframeOrigin + '/u2f-comms.html';\n  iframe.setAttribute('style', 'display:none');\n  document.body.appendChild(iframe);\n\n  var hasCalledBack = false;\n\n  var channel = new MessageChannel();\n  var ready = function(message) {\n    if (message.data == 'ready') {\n      channel.port1.removeEventListener('message', ready);\n      if (!hasCalledBack)\n      {\n        hasCalledBack = true;\n        callback(null, channel.port1);\n      }\n    } else {\n      console.error('First event on iframe port was not \"ready\"');\n    }\n  };\n  channel.port1.addEventListener('message', ready);\n  channel.port1.start();\n\n  iframe.addEventListener('load', function() {\n    // Deliver the port to the iframe and initialize\n    iframe.contentWindow.postMessage('init', iframeOrigin, [channel.port2]);\n  });\n\n  // Give this 200ms to initialize, after that, we treat this method as failed\n  setTimeout(function() {\n    if (!hasCalledBack)\n    {\n      hasCalledBack = true;\n      callback(new Error(\"IFrame extension not supported\"));\n    }\n  }, 200);\n};\n\n\n// High-level JS API\n\n/**\n * Default extension response timeout in seconds.\n * @const\n */\nu2f.EXTENSION_TIMEOUT_SEC = 30;\n\n/**\n * A singleton instance for a MessagePort to the extension.\n * @type {MessagePort|u2f.WrappedChromeRuntimePort_}\n * @private\n */\nu2f.port_ = null;\n\n/**\n * Callbacks waiting for a port\n * @type {Array.<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}\n * @private\n */\nu2f.waitingForPort_ = [];\n\n/**\n * A counter for requestIds.\n * @type {number}\n * @private\n */\nu2f.reqCounter_ = 0;\n\n/**\n * A map from requestIds to client callbacks\n * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))\n *                       |function((u2f.Error|u2f.SignResponse)))>}\n * @private\n */\nu2f.callbackMap_ = {};\n\n/**\n * Creates or retrieves the MessagePort singleton to use.\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\n * @private\n */\nu2f.getPortSingleton_ = function(callback) {\n  if (u2f.port_) {\n    callback(null, u2f.port_);\n  } else {\n    if (u2f.waitingForPort_.length == 0) {\n      u2f.getMessagePort(function(err, port) {\n        if (!err) {\n          u2f.port_ = port;\n          u2f.port_.addEventListener('message',\n            /** @type {function(Event)} */ (u2f.responseHandler_));\n        }\n\n        // Careful, here be async callbacks. Maybe.\n        while (u2f.waitingForPort_.length)\n          u2f.waitingForPort_.shift()(err, port);\n      });\n    }\n    u2f.waitingForPort_.push(callback);\n  }\n};\n\n/**\n * Handles response messages from the extension.\n * @param {MessageEvent.<u2f.Response>} message\n * @private\n */\nu2f.responseHandler_ = function(message) {\n  var response = message.data;\n  var reqId = response['requestId'];\n  if (!reqId || !u2f.callbackMap_[reqId]) {\n    console.error('Unknown or missing requestId in response.');\n    return;\n  }\n  var cb = u2f.callbackMap_[reqId];\n  delete u2f.callbackMap_[reqId];\n  cb(null, response['responseData']);\n};\n\n/**\n * Calls the callback with true or false as first and only argument\n * @param {Function} callback\n */\nu2f.isSupported = function(callback) {\n  u2f.getPortSingleton_(function(err, port) {\n    callback(!err);\n  });\n}\n\n/**\n * Dispatches an array of sign requests to available U2F tokens.\n * @param {Array.<u2f.SignRequest>} signRequests\n * @param {function((u2f.Error|u2f.SignResponse))} callback\n * @param {number=} opt_timeoutSeconds\n */\nu2f.sign = function(signRequests, callback, opt_timeoutSeconds) {\n  u2f.getPortSingleton_(function(err, port) {\n    if (err)\n      return callback(err);\n\n    var reqId = ++u2f.reqCounter_;\n    u2f.callbackMap_[reqId] = callback;\n    var req = {\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\n      signRequests: signRequests,\n      timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?\n        opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),\n      requestId: reqId\n    };\n    port.postMessage(req);\n  });\n};\n\n/**\n * Dispatches register requests to available U2F tokens. An array of sign\n * requests identifies already registered tokens.\n * @param {Array.<u2f.RegisterRequest>} registerRequests\n * @param {Array.<u2f.SignRequest>} signRequests\n * @param {function((u2f.Error|u2f.RegisterResponse))} callback\n * @param {number=} opt_timeoutSeconds\n */\nu2f.register = function(registerRequests, signRequests,\n    callback, opt_timeoutSeconds) {\n  u2f.getPortSingleton_(function(err, port) {\n    if (err)\n      return callback(err);\n\n    var reqId = ++u2f.reqCounter_;\n    u2f.callbackMap_[reqId] = callback;\n    var req = {\n      type: u2f.MessageTypes.U2F_REGISTER_REQUEST,\n      signRequests: signRequests,\n      registerRequests: registerRequests,\n      timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?\n        opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),\n      requestId: reqId\n    };\n    port.postMessage(req);\n  });\n};\n","'use strict';\n\nmodule.exports = API;\n\nvar chromeApi = require( './google-u2f-api' );\n\n// Feature detection (yes really)\nvar isBrowser = ( typeof navigator !== 'undefined' ) && !!navigator.userAgent;\nvar isSafari = isBrowser && navigator.userAgent.match( /Safari\\// )\n\t&& !navigator.userAgent.match( /Chrome\\// );\nvar isEDGE = isBrowser && navigator.userAgent.match( /Edge\\/1[2345]/ );\n\nvar _backend = null;\nfunction getBackend( Promise )\n{\n\tif ( !_backend )\n\t\t_backend = new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction notSupported( )\n\t\t\t{\n\t\t\t\t// Note; {native: true} means *not* using Google's hack\n\t\t\t\tresolve( { u2f: null, native: true } );\n\t\t\t}\n\n\t\t\tif ( !isBrowser )\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( isSafari )\n\t\t\t\t// Safari doesn't support U2F, and the Safari-FIDO-U2F\n\t\t\t\t// extension lacks full support (Multi-facet apps), so we\n\t\t\t\t// block it until proper support.\n\t\t\t\treturn notSupported( );\n\n\t\t\tvar hasNativeSupport =\n\t\t\t\t( typeof window.u2f !== 'undefined' ) &&\n\t\t\t\t( typeof window.u2f.sign === 'function' );\n\n\t\t\tif ( hasNativeSupport )\n\t\t\t\tresolve( { u2f: window.u2f, native: true } );\n\n\t\t\tif ( isEDGE )\n\t\t\t\t// We don't want to check for Google's extension hack on EDGE\n\t\t\t\t// as it'll cause trouble (popups, etc)\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( location.protocol === 'http:' )\n\t\t\t\t// U2F isn't supported over http, only https\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( typeof MessageChannel === 'undefined' )\n\t\t\t\t// Unsupported browser, the chrome hack would throw\n\t\t\t\treturn notSupported( );\n\n\t\t\t// Test for google extension support\n\t\t\tchromeApi.isSupported( function( ok )\n\t\t\t{\n\t\t\t\tif ( ok )\n\t\t\t\t\tresolve( { u2f: chromeApi, native: false } );\n\t\t\t\telse\n\t\t\t\t\tnotSupported( );\n\t\t\t} );\n\t\t} );\n\n\treturn _backend;\n}\n\nfunction API( Promise )\n{\n\treturn {\n\t\tisSupported   : isSupported.bind( Promise ),\n\t\tensureSupport : ensureSupport.bind( Promise ),\n\t\tregister      : register.bind( Promise ),\n\t\tsign          : sign.bind( Promise ),\n\t\tErrorCodes    : API.ErrorCodes,\n\t\tErrorNames    : API.ErrorNames\n\t};\n}\n\nAPI.ErrorCodes = {\n\tCANCELLED: -1,\n\tOK: 0,\n\tOTHER_ERROR: 1,\n\tBAD_REQUEST: 2,\n\tCONFIGURATION_UNSUPPORTED: 3,\n\tDEVICE_INELIGIBLE: 4,\n\tTIMEOUT: 5\n};\nAPI.ErrorNames = {\n\t\"-1\": \"CANCELLED\",\n\t\"0\": \"OK\",\n\t\"1\": \"OTHER_ERROR\",\n\t\"2\": \"BAD_REQUEST\",\n\t\"3\": \"CONFIGURATION_UNSUPPORTED\",\n\t\"4\": \"DEVICE_INELIGIBLE\",\n\t\"5\": \"TIMEOUT\"\n};\n\nfunction makeError( msg, err )\n{\n\tvar code = err != null ? err.errorCode : 1; // Default to OTHER_ERROR\n\tvar type = API.ErrorNames[ '' + code ];\n\tvar error = new Error( msg );\n\terror.metaData = {\n\t\ttype: type,\n\t\tcode: code\n\t}\n\treturn error;\n}\n\nfunction deferPromise( Promise, promise )\n{\n\tvar ret = { };\n\tret.promise = new Promise( function( resolve, reject ) {\n\t\tret.resolve = resolve;\n\t\tret.reject = reject;\n\t\tpromise.then( resolve, reject );\n\t} );\n\t/**\n\t * Reject request promise and disconnect port if 'disconnect' flag is true\n\t * @param {string} msg\n\t * @param {boolean} disconnect\n\t */\n\tret.promise.cancel = function( msg, disconnect )\n\t{\n\t\tgetBackend( Promise )\n\t\t.then( function( backend )\n\t\t{\n\t\t\tif ( disconnect && !backend.native )\n\t\t\t\tbackend.u2f.disconnect( );\n\n\t\t\tret.reject( makeError( msg, { errorCode: -1 } ) );\n\t\t} );\n\t};\n\treturn ret;\n}\n\nfunction defer( Promise, fun )\n{\n\treturn deferPromise( Promise, new Promise( function( resolve, reject )\n\t{\n\t\ttry\n\t\t{\n\t\t\tfun && fun( resolve, reject );\n\t\t}\n\t\tcatch ( err )\n\t\t{\n\t\t\treject( err );\n\t\t}\n\t} ) );\n}\n\nfunction isSupported( )\n{\n\tvar Promise = this;\n\n\treturn getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\treturn !!backend.u2f;\n\t} );\n}\n\nfunction _ensureSupport( backend )\n{\n\tif ( !backend.u2f )\n\t{\n\t\tif ( location.protocol === 'http:' )\n\t\t\tthrow new Error( \"U2F isn't supported over http, only https\" );\n\t\tthrow new Error( \"U2F not supported\" );\n\t}\n}\n\nfunction ensureSupport( )\n{\n\tvar Promise = this;\n\n\treturn getBackend( Promise )\n\t.then( _ensureSupport );\n}\n\nfunction register( registerRequests, signRequests /* = null */, timeout )\n{\n\tvar Promise = this;\n\n\tif ( !Array.isArray( registerRequests ) )\n\t\tregisterRequests = [ registerRequests ];\n\n\tif ( typeof signRequests === 'number' && typeof timeout === 'undefined' )\n\t{\n\t\ttimeout = signRequests;\n\t\tsignRequests = null;\n\t}\n\n\tif ( !signRequests )\n\t\tsignRequests = [ ];\n\n\treturn deferPromise( Promise, getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\t_ensureSupport( backend );\n\n\t\tvar native = backend.native;\n\t\tvar u2f = backend.u2f;\n\n\t\treturn new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction cbNative( response )\n\t\t\t{\n\t\t\t\tif ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Registration failed\", response ) );\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete response.errorCode;\n\t\t\t\t\tresolve( response );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction cbChrome( err, response )\n\t\t\t{\n\t\t\t\tif ( err )\n\t\t\t\t\treject( err );\n\t\t\t\telse if ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Registration failed\", response ) );\n\t\t\t\telse\n\t\t\t\t\tresolve( response );\n\t\t\t}\n\n\t\t\tif ( native )\n\t\t\t{\n\t\t\t\tvar appId = registerRequests[ 0 ].appId;\n\n\t\t\t\tu2f.register(\n\t\t\t\t\tappId, registerRequests, signRequests, cbNative, timeout );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tu2f.register(\n\t\t\t\t\tregisterRequests, signRequests, cbChrome, timeout );\n\t\t\t}\n\t\t} );\n\t} ) ).promise;\n}\n\nfunction sign( signRequests, timeout )\n{\n\tvar Promise = this;\n\n\tif ( !Array.isArray( signRequests ) )\n\t\tsignRequests = [ signRequests ];\n\n\treturn deferPromise( Promise, getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\t_ensureSupport( backend );\n\n\t\tvar native = backend.native;\n\t\tvar u2f = backend.u2f;\n\n\t\treturn new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction cbNative( response )\n\t\t\t{\n\t\t\t\tif ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Sign failed\", response ) );\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete response.errorCode;\n\t\t\t\t\tresolve( response );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction cbChrome( err, response )\n\t\t\t{\n\t\t\t\tif ( err )\n\t\t\t\t\treject( err );\n\t\t\t\telse if ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Sign failed\", response ) );\n\t\t\t\telse\n\t\t\t\t\tresolve( response );\n\t\t\t}\n\n\t\t\tif ( native )\n\t\t\t{\n\t\t\t\tvar appId = signRequests[ 0 ].appId;\n\t\t\t\tvar challenge = signRequests[ 0 ].challenge;\n\n\t\t\t\tu2f.sign( appId, challenge, signRequests, cbNative, timeout );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tu2f.sign( signRequests, cbChrome, timeout );\n\t\t\t}\n\t\t} );\n\t} ) ).promise;\n}\n\nfunction makeDefault( func )\n{\n\tAPI[ func ] = function( )\n\t{\n\t\tif ( !global.Promise )\n\t\t\t// This is very unlikely to ever happen, since browsers\n\t\t\t// supporting U2F will most likely support Promises.\n\t\t\tthrow new Error( \"The platform doesn't natively support promises\" );\n\n\t\tvar args = [ ].slice.call( arguments );\n\t\treturn API( global.Promise )[ func ].apply( null, args );\n\t};\n}\n\n// Provide default functions using the built-in Promise if available.\nmakeDefault( 'isSupported' );\nmakeDefault( 'ensureSupport' );\nmakeDefault( 'register' );\nmakeDefault( 'sign' );\n","'use strict';\nmodule.exports = require( './lib/u2f-api' );","/* eslint-disable no-continue */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nvar errorClasses = {};\r\nvar deserializers = {};\r\nvar addCustomErrorDeserializer = function (name, deserializer) {\r\n    deserializers[name] = deserializer;\r\n};\r\nvar createCustomErrorClass = function (name) {\r\n    var C = function CustomError(message, fields) {\r\n        Object.assign(this, fields);\r\n        this.name = name;\r\n        this.message = message || name;\r\n        this.stack = new Error().stack;\r\n    };\r\n    C.prototype = new Error();\r\n    errorClasses[name] = C;\r\n    return C;\r\n};\r\n// inspired from https://github.com/programble/errio/blob/master/index.js\r\nvar deserializeError = function (object) {\r\n    if (typeof object === \"object\" && object) {\r\n        try {\r\n            // $FlowFixMe FIXME HACK\r\n            var msg = JSON.parse(object.message);\r\n            if (msg.message && msg.name) {\r\n                object = msg;\r\n            }\r\n        }\r\n        catch (e) {\r\n            // nothing\r\n        }\r\n        var error = void 0;\r\n        if (typeof object.name === \"string\") {\r\n            var name_1 = object.name;\r\n            var des = deserializers[name_1];\r\n            if (des) {\r\n                error = des(object);\r\n            }\r\n            else {\r\n                var constructor = name_1 === \"Error\" ? Error : errorClasses[name_1];\r\n                if (!constructor) {\r\n                    console.warn(\"deserializing an unknown class '\" + name_1 + \"'\");\r\n                    constructor = createCustomErrorClass(name_1);\r\n                }\r\n                error = Object.create(constructor.prototype);\r\n                try {\r\n                    for (var prop in object) {\r\n                        if (object.hasOwnProperty(prop)) {\r\n                            error[prop] = object[prop];\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // sometimes setting a property can fail (e.g. .name)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            error = new Error(object.message);\r\n        }\r\n        if (!error.stack && Error.captureStackTrace) {\r\n            Error.captureStackTrace(error, deserializeError);\r\n        }\r\n        return error;\r\n    }\r\n    return new Error(String(object));\r\n};\r\n// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js\r\nvar serializeError = function (value) {\r\n    if (!value)\r\n        return value;\r\n    if (typeof value === \"object\") {\r\n        return destroyCircular(value, []);\r\n    }\r\n    if (typeof value === \"function\") {\r\n        return \"[Function: \" + (value.name || \"anonymous\") + \"]\";\r\n    }\r\n    return value;\r\n};\r\n// https://www.npmjs.com/package/destroy-circular\r\nfunction destroyCircular(from, seen) {\r\n    var to = {};\r\n    seen.push(from);\r\n    for (var _i = 0, _a = Object.keys(from); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        var value = from[key];\r\n        if (typeof value === \"function\") {\r\n            continue;\r\n        }\r\n        if (!value || typeof value !== \"object\") {\r\n            to[key] = value;\r\n            continue;\r\n        }\r\n        if (seen.indexOf(from[key]) === -1) {\r\n            to[key] = destroyCircular(from[key], seen.slice(0));\r\n            continue;\r\n        }\r\n        to[key] = \"[Circular]\";\r\n    }\r\n    if (typeof from.name === \"string\") {\r\n        to.name = from.name;\r\n    }\r\n    if (typeof from.message === \"string\") {\r\n        to.message = from.message;\r\n    }\r\n    if (typeof from.stack === \"string\") {\r\n        to.stack = from.stack;\r\n    }\r\n    return to;\r\n}\n\nvar AccountNameRequiredError = createCustomErrorClass(\"AccountNameRequired\");\r\nvar AccountNotSupported = createCustomErrorClass(\"AccountNotSupported\");\r\nvar AmountRequired = createCustomErrorClass(\"AmountRequired\");\r\nvar BluetoothRequired = createCustomErrorClass(\"BluetoothRequired\");\r\nvar BtcUnmatchedApp = createCustomErrorClass(\"BtcUnmatchedApp\");\r\nvar CantOpenDevice = createCustomErrorClass(\"CantOpenDevice\");\r\nvar CashAddrNotSupported = createCustomErrorClass(\"CashAddrNotSupported\");\r\nvar CurrencyNotSupported = createCustomErrorClass(\"CurrencyNotSupported\");\r\nvar DeviceAppVerifyNotSupported = createCustomErrorClass(\"DeviceAppVerifyNotSupported\");\r\nvar DeviceGenuineSocketEarlyClose = createCustomErrorClass(\"DeviceGenuineSocketEarlyClose\");\r\nvar DeviceNotGenuineError = createCustomErrorClass(\"DeviceNotGenuine\");\r\nvar DeviceOnDashboardExpected = createCustomErrorClass(\"DeviceOnDashboardExpected\");\r\nvar DeviceOnDashboardUnexpected = createCustomErrorClass(\"DeviceOnDashboardUnexpected\");\r\nvar DeviceInOSUExpected = createCustomErrorClass(\"DeviceInOSUExpected\");\r\nvar DeviceHalted = createCustomErrorClass(\"DeviceHalted\");\r\nvar DeviceNameInvalid = createCustomErrorClass(\"DeviceNameInvalid\");\r\nvar DeviceSocketFail = createCustomErrorClass(\"DeviceSocketFail\");\r\nvar DeviceSocketNoBulkStatus = createCustomErrorClass(\"DeviceSocketNoBulkStatus\");\r\nvar DisconnectedDevice = createCustomErrorClass(\"DisconnectedDevice\");\r\nvar DisconnectedDeviceDuringOperation = createCustomErrorClass(\"DisconnectedDeviceDuringOperation\");\r\nvar EnpointConfigError = createCustomErrorClass(\"EnpointConfig\");\r\nvar EthAppPleaseEnableContractData = createCustomErrorClass(\"EthAppPleaseEnableContractData\");\r\nvar FeeEstimationFailed = createCustomErrorClass(\"FeeEstimationFailed\");\r\nvar FirmwareNotRecognized = createCustomErrorClass(\"FirmwareNotRecognized\");\r\nvar HardResetFail = createCustomErrorClass(\"HardResetFail\");\r\nvar InvalidXRPTag = createCustomErrorClass(\"InvalidXRPTag\");\r\nvar InvalidAddress = createCustomErrorClass(\"InvalidAddress\");\r\nvar InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass(\"InvalidAddressBecauseDestinationIsAlsoSource\");\r\nvar LatestMCUInstalledError = createCustomErrorClass(\"LatestMCUInstalledError\");\r\nvar UnknownMCU = createCustomErrorClass(\"UnknownMCU\");\r\nvar LedgerAPIError = createCustomErrorClass(\"LedgerAPIError\");\r\nvar LedgerAPIErrorWithMessage = createCustomErrorClass(\"LedgerAPIErrorWithMessage\");\r\nvar LedgerAPINotAvailable = createCustomErrorClass(\"LedgerAPINotAvailable\");\r\nvar ManagerAppAlreadyInstalledError = createCustomErrorClass(\"ManagerAppAlreadyInstalled\");\r\nvar ManagerAppRelyOnBTCError = createCustomErrorClass(\"ManagerAppRelyOnBTC\");\r\nvar ManagerAppDepInstallRequired = createCustomErrorClass(\"ManagerAppDepInstallRequired\");\r\nvar ManagerAppDepUninstallRequired = createCustomErrorClass(\"ManagerAppDepUninstallRequired\");\r\nvar ManagerDeviceLockedError = createCustomErrorClass(\"ManagerDeviceLocked\");\r\nvar ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass(\"ManagerFirmwareNotEnoughSpace\");\r\nvar ManagerNotEnoughSpaceError = createCustomErrorClass(\"ManagerNotEnoughSpace\");\r\nvar ManagerUninstallBTCDep = createCustomErrorClass(\"ManagerUninstallBTCDep\");\r\nvar NetworkDown = createCustomErrorClass(\"NetworkDown\");\r\nvar NoAddressesFound = createCustomErrorClass(\"NoAddressesFound\");\r\nvar NotEnoughBalance = createCustomErrorClass(\"NotEnoughBalance\");\r\nvar NotEnoughBalanceToDelegate = createCustomErrorClass(\"NotEnoughBalanceToDelegate\");\r\nvar NotEnoughBalanceInParentAccount = createCustomErrorClass(\"NotEnoughBalanceInParentAccount\");\r\nvar NotEnoughSpendableBalance = createCustomErrorClass(\"NotEnoughSpendableBalance\");\r\nvar NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass(\"NotEnoughBalanceBecauseDestinationNotCreated\");\r\nvar NoAccessToCamera = createCustomErrorClass(\"NoAccessToCamera\");\r\nvar NotEnoughGas = createCustomErrorClass(\"NotEnoughGas\");\r\nvar NotSupportedLegacyAddress = createCustomErrorClass(\"NotSupportedLegacyAddress\");\r\nvar GasLessThanEstimate = createCustomErrorClass(\"GasLessThanEstimate\");\r\nvar PasswordsDontMatchError = createCustomErrorClass(\"PasswordsDontMatch\");\r\nvar PasswordIncorrectError = createCustomErrorClass(\"PasswordIncorrect\");\r\nvar RecommendSubAccountsToEmpty = createCustomErrorClass(\"RecommendSubAccountsToEmpty\");\r\nvar RecommendUndelegation = createCustomErrorClass(\"RecommendUndelegation\");\r\nvar TimeoutTagged = createCustomErrorClass(\"TimeoutTagged\");\r\nvar UnexpectedBootloader = createCustomErrorClass(\"UnexpectedBootloader\");\r\nvar MCUNotGenuineToDashboard = createCustomErrorClass(\"MCUNotGenuineToDashboard\");\r\nvar RecipientRequired = createCustomErrorClass(\"RecipientRequired\");\r\nvar UnavailableTezosOriginatedAccountReceive = createCustomErrorClass(\"UnavailableTezosOriginatedAccountReceive\");\r\nvar UnavailableTezosOriginatedAccountSend = createCustomErrorClass(\"UnavailableTezosOriginatedAccountSend\");\r\nvar UpdateFetchFileFail = createCustomErrorClass(\"UpdateFetchFileFail\");\r\nvar UpdateIncorrectHash = createCustomErrorClass(\"UpdateIncorrectHash\");\r\nvar UpdateIncorrectSig = createCustomErrorClass(\"UpdateIncorrectSig\");\r\nvar UpdateYourApp = createCustomErrorClass(\"UpdateYourApp\");\r\nvar UserRefusedDeviceNameChange = createCustomErrorClass(\"UserRefusedDeviceNameChange\");\r\nvar UserRefusedAddress = createCustomErrorClass(\"UserRefusedAddress\");\r\nvar UserRefusedFirmwareUpdate = createCustomErrorClass(\"UserRefusedFirmwareUpdate\");\r\nvar UserRefusedAllowManager = createCustomErrorClass(\"UserRefusedAllowManager\");\r\nvar UserRefusedOnDevice = createCustomErrorClass(\"UserRefusedOnDevice\"); // TODO rename because it's just for transaction refusal\r\nvar TransportOpenUserCancelled = createCustomErrorClass(\"TransportOpenUserCancelled\");\r\nvar TransportInterfaceNotAvailable = createCustomErrorClass(\"TransportInterfaceNotAvailable\");\r\nvar TransportRaceCondition = createCustomErrorClass(\"TransportRaceCondition\");\r\nvar TransportWebUSBGestureRequired = createCustomErrorClass(\"TransportWebUSBGestureRequired\");\r\nvar DeviceShouldStayInApp = createCustomErrorClass(\"DeviceShouldStayInApp\");\r\nvar WebsocketConnectionError = createCustomErrorClass(\"WebsocketConnectionError\");\r\nvar WebsocketConnectionFailed = createCustomErrorClass(\"WebsocketConnectionFailed\");\r\nvar WrongDeviceForAccount = createCustomErrorClass(\"WrongDeviceForAccount\");\r\nvar WrongAppForCurrency = createCustomErrorClass(\"WrongAppForCurrency\");\r\nvar ETHAddressNonEIP = createCustomErrorClass(\"ETHAddressNonEIP\");\r\nvar CantScanQRCode = createCustomErrorClass(\"CantScanQRCode\");\r\nvar FeeNotLoaded = createCustomErrorClass(\"FeeNotLoaded\");\r\nvar FeeRequired = createCustomErrorClass(\"FeeRequired\");\r\nvar FeeTooHigh = createCustomErrorClass(\"FeeTooHigh\");\r\nvar SyncError = createCustomErrorClass(\"SyncError\");\r\nvar PairingFailed = createCustomErrorClass(\"PairingFailed\");\r\nvar GenuineCheckFailed = createCustomErrorClass(\"GenuineCheckFailed\");\r\nvar LedgerAPI4xx = createCustomErrorClass(\"LedgerAPI4xx\");\r\nvar LedgerAPI5xx = createCustomErrorClass(\"LedgerAPI5xx\");\r\nvar FirmwareOrAppUpdateRequired = createCustomErrorClass(\"FirmwareOrAppUpdateRequired\");\r\n// db stuff, no need to translate\r\nvar NoDBPathGiven = createCustomErrorClass(\"NoDBPathGiven\");\r\nvar DBWrongPassword = createCustomErrorClass(\"DBWrongPassword\");\r\nvar DBNotReset = createCustomErrorClass(\"DBNotReset\");\r\n/**\r\n * TransportError is used for any generic transport errors.\r\n * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.\r\n */\r\nfunction TransportError(message, id) {\r\n    this.name = \"TransportError\";\r\n    this.message = message;\r\n    this.stack = new Error().stack;\r\n    this.id = id;\r\n}\r\nTransportError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportError\", function (e) { return new TransportError(e.message, e.id); });\r\nvar StatusCodes = {\r\n    PIN_REMAINING_ATTEMPTS: 0x63c0,\r\n    INCORRECT_LENGTH: 0x6700,\r\n    MISSING_CRITICAL_PARAMETER: 0x6800,\r\n    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,\r\n    SECURITY_STATUS_NOT_SATISFIED: 0x6982,\r\n    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,\r\n    INCORRECT_DATA: 0x6a80,\r\n    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,\r\n    REFERENCED_DATA_NOT_FOUND: 0x6a88,\r\n    FILE_ALREADY_EXISTS: 0x6a89,\r\n    INCORRECT_P1_P2: 0x6b00,\r\n    INS_NOT_SUPPORTED: 0x6d00,\r\n    CLA_NOT_SUPPORTED: 0x6e00,\r\n    TECHNICAL_PROBLEM: 0x6f00,\r\n    OK: 0x9000,\r\n    MEMORY_PROBLEM: 0x9240,\r\n    NO_EF_SELECTED: 0x9400,\r\n    INVALID_OFFSET: 0x9402,\r\n    FILE_NOT_FOUND: 0x9404,\r\n    INCONSISTENT_FILE: 0x9408,\r\n    ALGORITHM_NOT_SUPPORTED: 0x9484,\r\n    INVALID_KCV: 0x9485,\r\n    CODE_NOT_INITIALIZED: 0x9802,\r\n    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,\r\n    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,\r\n    CONTRADICTION_INVALIDATION: 0x9810,\r\n    CODE_BLOCKED: 0x9840,\r\n    MAX_VALUE_REACHED: 0x9850,\r\n    GP_AUTH_FAILED: 0x6300,\r\n    LICENSING: 0x6f42,\r\n    HALTED: 0x6faa,\r\n};\r\nfunction getAltStatusMessage(code) {\r\n    switch (code) {\r\n        // improve text of most common errors\r\n        case 0x6700:\r\n            return \"Incorrect length\";\r\n        case 0x6800:\r\n            return \"Missing critical parameter\";\r\n        case 0x6982:\r\n            return \"Security not satisfied (dongle locked or have invalid access rights)\";\r\n        case 0x6985:\r\n            return \"Condition of use not satisfied (denied by the user?)\";\r\n        case 0x6a80:\r\n            return \"Invalid data received\";\r\n        case 0x6b00:\r\n            return \"Invalid parameter received\";\r\n    }\r\n    if (0x6f00 <= code && code <= 0x6fff) {\r\n        return \"Internal error, please report\";\r\n    }\r\n}\r\n/**\r\n * Error thrown when a device returned a non success status.\r\n * the error.statusCode is one of the `StatusCodes` exported by this library.\r\n */\r\nfunction TransportStatusError(statusCode) {\r\n    this.name = \"TransportStatusError\";\r\n    var statusText = Object.keys(StatusCodes).find(function (k) { return StatusCodes[k] === statusCode; }) ||\r\n        \"UNKNOWN_ERROR\";\r\n    var smsg = getAltStatusMessage(statusCode) || statusText;\r\n    var statusCodeStr = statusCode.toString(16);\r\n    this.message = \"Ledger device: \" + smsg + \" (0x\" + statusCodeStr + \")\";\r\n    this.stack = new Error().stack;\r\n    this.statusCode = statusCode;\r\n    this.statusText = statusText;\r\n}\r\nTransportStatusError.prototype = new Error();\r\naddCustomErrorDeserializer(\"TransportStatusError\", function (e) { return new TransportStatusError(e.statusCode); });\n\nexport { AccountNameRequiredError, AccountNotSupported, AmountRequired, BluetoothRequired, BtcUnmatchedApp, CantOpenDevice, CantScanQRCode, CashAddrNotSupported, CurrencyNotSupported, DBNotReset, DBWrongPassword, DeviceAppVerifyNotSupported, DeviceGenuineSocketEarlyClose, DeviceHalted, DeviceInOSUExpected, DeviceNameInvalid, DeviceNotGenuineError, DeviceOnDashboardExpected, DeviceOnDashboardUnexpected, DeviceShouldStayInApp, DeviceSocketFail, DeviceSocketNoBulkStatus, DisconnectedDevice, DisconnectedDeviceDuringOperation, ETHAddressNonEIP, EnpointConfigError, EthAppPleaseEnableContractData, FeeEstimationFailed, FeeNotLoaded, FeeRequired, FeeTooHigh, FirmwareNotRecognized, FirmwareOrAppUpdateRequired, GasLessThanEstimate, GenuineCheckFailed, HardResetFail, InvalidAddress, InvalidAddressBecauseDestinationIsAlsoSource, InvalidXRPTag, LatestMCUInstalledError, LedgerAPI4xx, LedgerAPI5xx, LedgerAPIError, LedgerAPIErrorWithMessage, LedgerAPINotAvailable, MCUNotGenuineToDashboard, ManagerAppAlreadyInstalledError, ManagerAppDepInstallRequired, ManagerAppDepUninstallRequired, ManagerAppRelyOnBTCError, ManagerDeviceLockedError, ManagerFirmwareNotEnoughSpaceError, ManagerNotEnoughSpaceError, ManagerUninstallBTCDep, NetworkDown, NoAccessToCamera, NoAddressesFound, NoDBPathGiven, NotEnoughBalance, NotEnoughBalanceBecauseDestinationNotCreated, NotEnoughBalanceInParentAccount, NotEnoughBalanceToDelegate, NotEnoughGas, NotEnoughSpendableBalance, NotSupportedLegacyAddress, PairingFailed, PasswordIncorrectError, PasswordsDontMatchError, RecipientRequired, RecommendSubAccountsToEmpty, RecommendUndelegation, StatusCodes, SyncError, TimeoutTagged, TransportError, TransportInterfaceNotAvailable, TransportOpenUserCancelled, TransportRaceCondition, TransportStatusError, TransportWebUSBGestureRequired, UnavailableTezosOriginatedAccountReceive, UnavailableTezosOriginatedAccountSend, UnexpectedBootloader, UnknownMCU, UpdateFetchFileFail, UpdateIncorrectHash, UpdateIncorrectSig, UpdateYourApp, UserRefusedAddress, UserRefusedAllowManager, UserRefusedDeviceNameChange, UserRefusedFirmwareUpdate, UserRefusedOnDevice, WebsocketConnectionError, WebsocketConnectionFailed, WrongAppForCurrency, WrongDeviceForAccount, addCustomErrorDeserializer, createCustomErrorClass, deserializeError, getAltStatusMessage, serializeError };\n","//@flow\n\nimport EventEmitter from \"events\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport {\n  TransportRaceCondition,\n  TransportError,\n  StatusCodes,\n  getAltStatusMessage,\n  TransportStatusError,\n} from \"@ledgerhq/errors\";\n\nexport {\n  TransportError,\n  TransportStatusError,\n  StatusCodes,\n  getAltStatusMessage,\n};\n\n/**\n */\nexport type Subscription = { unsubscribe: () => void };\n\n/**\n */\nexport type Device = Object;\n\n/**\n * type: add or remove event\n * descriptor: a parameter that can be passed to open(descriptor)\n * deviceModel: device info on the model (is it a nano s, nano x, ...)\n * device: transport specific device info\n */\nexport type DescriptorEvent<Descriptor> = {\n  type: \"add\" | \"remove\",\n  descriptor: Descriptor,\n  deviceModel?: ?DeviceModel,\n  device?: Device,\n};\n/**\n */\nexport type Observer<Ev> = $ReadOnly<{\n  next: (event: Ev) => mixed,\n  error: (e: any) => mixed,\n  complete: () => mixed,\n}>;\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nexport default class Transport<Descriptor> {\n  exchangeTimeout: number = 30000;\n  unresponsiveTimeout: number = 15000;\n  deviceModel: ?DeviceModel = null;\n\n  /**\n   * Statically check if a transport is supported on the user's platform/browser.\n   */\n  static +isSupported: () => Promise<boolean>;\n\n  /**\n   * List once all available descriptors. For a better granularity, checkout `listen()`.\n   * @return a promise of descriptors\n   * @example\n   * TransportFoo.list().then(descriptors => ...)\n   */\n  static +list: () => Promise<Array<Descriptor>>;\n\n  /**\n   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )\n   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `\"add\"` or `\"remove\"` and descriptor is a value you can pass to `open(descriptor)`.\n   * each listen() call will first emit all potential device already connected and then will emit events can come over times,\n   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.\n   * @param observer is an object with a next, error and complete function (compatible with observer pattern)\n   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.\n   * @example\nconst sub = TransportFoo.listen({\n  next: e => {\n    if (e.type===\"add\") {\n      sub.unsubscribe();\n      const transport = await TransportFoo.open(e.descriptor);\n      ...\n    }\n  },\n  error: error => {},\n  complete: () => {}\n})\n   */\n  static +listen: (\n    observer: Observer<DescriptorEvent<Descriptor>>\n  ) => Subscription;\n\n  /**\n   * attempt to create a Transport instance with potentially a descriptor.\n   * @param descriptor: the descriptor to open the transport with.\n   * @param timeout: an optional timeout\n   * @return a Promise of Transport instance\n   * @example\nTransportFoo.open(descriptor).then(transport => ...)\n   */\n  static +open: (\n    descriptor: Descriptor,\n    timeout?: number\n  ) => Promise<Transport<Descriptor>>;\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  exchange(_apdu: Buffer): Promise<Buffer> {\n    throw new Error(\"exchange not implemented\");\n  }\n\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n  setScrambleKey(_key: string) {}\n\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n  close(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  _events = new EventEmitter();\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName: string, cb: Function) {\n    this._events.on(eventName, cb);\n  }\n\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n  off(eventName: string, cb: Function) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event: string, ...args: *) {\n    this._events.emit(event, ...args);\n  }\n\n  /**\n   * Enable or not logs of the binary exchange\n   */\n  setDebugMode() {\n    console.warn(\n      \"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\"\n    );\n  }\n\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n  setExchangeTimeout(exchangeTimeout: number) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout: number) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n  send = async (\n    cla: number,\n    ins: number,\n    p1: number,\n    p2: number,\n    data: Buffer = Buffer.alloc(0),\n    statusList: Array<number> = [StatusCodes.OK]\n  ): Promise<Buffer> => {\n    if (data.length >= 256) {\n      throw new TransportError(\n        \"data.length exceed 256 bytes limit. Got: \" + data.length,\n        \"DataLengthTooBig\"\n      );\n    }\n    const response = await this.exchange(\n      Buffer.concat([\n        Buffer.from([cla, ins, p1, p2]),\n        Buffer.from([data.length]),\n        data,\n      ])\n    );\n    const sw = response.readUInt16BE(response.length - 2);\n    if (!statusList.some((s) => s === sw)) {\n      throw new TransportStatusError(sw);\n    }\n    return response;\n  };\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\nTransportFoo.create().then(transport => ...)\n   */\n  static create(\n    openTimeout?: number = 3000,\n    listenTimeout?: number\n  ): Promise<Transport<Descriptor>> {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: (e) => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: (e) => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          if (!found) {\n            reject(\n              new TransportError(\n                this.ErrorMessage_NoDeviceFound,\n                \"NoDeviceFound\"\n              )\n            );\n          }\n        },\n      });\n      const listenTimeoutId = listenTimeout\n        ? setTimeout(() => {\n            sub.unsubscribe();\n            reject(\n              new TransportError(\n                this.ErrorMessage_ListenTimeout,\n                \"ListenTimeout\"\n              )\n            );\n          }, listenTimeout)\n        : null;\n    });\n  }\n\n  exchangeBusyPromise: ?Promise<void>;\n\n  // $FlowFixMe\n  exchangeAtomicImpl = async (f) => {\n    if (this.exchangeBusyPromise) {\n      throw new TransportRaceCondition(\n        \"An action was already pending on the Ledger device. Please deny or reconnect.\"\n      );\n    }\n    let resolveBusy;\n    const busyPromise = new Promise((r) => {\n      resolveBusy = r;\n    });\n    this.exchangeBusyPromise = busyPromise;\n    let unresponsiveReached = false;\n    const timeout = setTimeout(() => {\n      unresponsiveReached = true;\n      this.emit(\"unresponsive\");\n    }, this.unresponsiveTimeout);\n    try {\n      const res = await f();\n      if (unresponsiveReached) {\n        this.emit(\"responsive\");\n      }\n      return res;\n    } finally {\n      clearTimeout(timeout);\n      if (resolveBusy) resolveBusy();\n      this.exchangeBusyPromise = null;\n    }\n  };\n\n  decorateAppAPIMethods(\n    self: Object,\n    methods: Array<string>,\n    scrambleKey: string\n  ) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(\n        methodName,\n        self[methodName],\n        self,\n        scrambleKey\n      );\n    }\n  }\n\n  _appAPIlock = null;\n  decorateAppAPIMethod<R, A: any[]>(\n    methodName: string,\n    f: (...args: A) => Promise<R>,\n    ctx: *,\n    scrambleKey: string\n  ): (...args: A) => Promise<R> {\n    return async (...args) => {\n      const { _appAPIlock } = this;\n      if (_appAPIlock) {\n        return Promise.reject(\n          new TransportError(\n            \"Ledger Device is busy (lock \" + _appAPIlock + \")\",\n            \"TransportLocked\"\n          )\n        );\n      }\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n  static ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\n  static ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n}\n","// @flow\n\n/**\n * A Log object\n */\nexport type Log = {\n  type: string,\n  message?: string,\n  data?: any,\n  id: string, // unique amount all logs\n  date: Date, // date of the log\n};\n\nexport type Unsubscribe = () => void;\n\nlet id = 0;\nconst subscribers = [];\n\n/**\n * log something\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport const log = (type: string, message?: string, data?: any) => {\n  const obj: Log = { type, id: String(++id), date: new Date() };\n  if (message) obj.message = message;\n  if (data) obj.data = data;\n  dispatch(obj);\n};\n\n/**\n * listen to logs.\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport const listen = (cb: (Log) => void): Unsubscribe => {\n  subscribers.push(cb);\n  return () => {\n    const i = subscribers.indexOf(cb);\n    if (i !== -1) {\n      // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n      subscribers[i] = subscribers[subscribers.length - 1];\n      subscribers.pop();\n    }\n  };\n};\n\nfunction dispatch(log: Log) {\n  for (let i = 0; i < subscribers.length; i++) {\n    try {\n      subscribers[i](log);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n// for debug purpose\nif (typeof window !== \"undefined\") {\n  window.__ledgerLogsListen = listen;\n}\n","//@flow\n\nimport { sign, isSupported } from \"u2f-api\";\nimport Transport from \"@ledgerhq/hw-transport\";\nimport { log } from \"@ledgerhq/logs\";\nimport { TransportError } from \"@ledgerhq/errors\";\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  const err = new TransportError(message, id);\n  // $FlowFixMe\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu: Buffer, key: Buffer) {\n  const result = Buffer.alloc(apdu.length);\n  for (let i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n  return result;\n}\n\n// Convert from normal to web-safe, strip trailing \"=\"s\nconst webSafe64 = (base64: string) =>\n  base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n\n// Convert from web-safe to normal, add trailing \"=\"s\nconst normal64 = (base64: string) =>\n  base64.replace(/-/g, \"+\").replace(/_/g, \"/\") +\n  \"==\".substring(0, (3 * base64.length) % 4);\n\nfunction attemptExchange(\n  apdu: Buffer,\n  timeoutMillis: number,\n  scrambleKey: Buffer,\n  unwrap: boolean\n): Promise<Buffer> {\n  const keyHandle = wrapApdu(apdu, scrambleKey);\n  const challenge = Buffer.from(\n    \"0000000000000000000000000000000000000000000000000000000000000000\",\n    \"hex\"\n  );\n  const signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin,\n  };\n  log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n  return sign(signRequest, timeoutMillis / 1000).then((response) => {\n    const { signatureData } = response;\n    if (typeof signatureData === \"string\") {\n      const data = Buffer.from(normal64(signatureData), \"base64\");\n      let result;\n      if (!unwrap) {\n        result = data;\n      } else {\n        result = data.slice(5);\n      }\n      log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nlet transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach((t) => t.emit(\"disconnect\"));\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\nexport default class TransportU2F extends Transport<null> {\n  static isSupported = isSupported;\n\n  /*\n   */\n  static list = (): * =>\n    // this transport is not discoverable but we are going to guess if it is here with isSupported()\n    isSupported().then((supported) => (supported ? [null] : []));\n\n  /*\n   */\n  static listen = (observer: *) => {\n    let unsubscribed = false;\n    isSupported().then((supported) => {\n      if (unsubscribed) return;\n      if (supported) {\n        observer.next({ type: \"add\", descriptor: null });\n        observer.complete();\n      } else {\n        observer.error(\n          new TransportError(\n            \"U2F browser support is needed for Ledger. \" +\n              \"Please use Chrome, Opera or Firefox with a U2F extension. \" +\n              \"Also make sure you're on an HTTPS connection\",\n            \"U2FNotSupported\"\n          )\n        );\n      }\n    });\n    return {\n      unsubscribe: () => {\n        unsubscribed = true;\n      },\n    };\n  };\n\n  scrambleKey: Buffer;\n\n  unwrap: boolean = true;\n\n  /**\n   * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n   */\n  static async open(_: *, _openTimeout?: number = 5000): Promise<TransportU2F> {\n    return new TransportU2F();\n  }\n\n  constructor() {\n    super();\n    transportInstances.push(this);\n  }\n\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n  async exchange(apdu: Buffer): Promise<Buffer> {\n    try {\n      return await attemptExchange(\n        apdu,\n        this.exchangeTimeout,\n        this.scrambleKey,\n        this.unwrap\n      );\n    } catch (e) {\n      const isU2FError = typeof e.metaData === \"object\";\n      if (isU2FError) {\n        if (isTimeoutU2FError(e)) {\n          emitDisconnect();\n        }\n        // the wrapping make error more usable and \"printable\" to the end user.\n        throw wrapU2FTransportError(\n          e,\n          \"Failed to sign with Ledger device: U2F \" + e.metaData.type,\n          \"U2F_\" + e.metaData.code\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   */\n  setScrambleKey(scrambleKey: string) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n\n  /**\n   */\n  setUnwrap(unwrap: boolean) {\n    this.unwrap = unwrap;\n  }\n\n  close(): Promise<void> {\n    // u2f have no way to clean things up\n    return Promise.resolve();\n  }\n}\n","import { createClient } from 'near-ledger-js';\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n\nasync function createLedgerU2FTransport() {\n    const transport = await TransportU2F.create();\n    transport.setScrambleKey(\"NEAR\");\n    return transport;\n}\n\nasync function createLedgerU2FClient() {\n    const transport = await createLedgerU2FTransport();\n    const client = await createClient(transport);\n    return client;\n}\n\nexport { createLedgerU2FClient };"]}